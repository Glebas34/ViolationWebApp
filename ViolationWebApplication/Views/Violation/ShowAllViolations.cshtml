@using Microsoft.AspNetCore.Identity;
@inject ViolationWebApplication.Interfaces.IUnitOfWork UnitOfWork
@inject UserManager<AppUser> UserManager
@inject ViolationWebApplication.Data.AppDbContext context
@{
    var violations = (await UnitOfWork.ViolationRepository.GetAll()).ToList();
    await UnitOfWork.ViolationRepository.ExplicitLoadingRange(violations, "Car");
    var user = await UserManager.GetUserAsync(User);
}

<h2>User Violations</h2>

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Машина</th>
                <th>Нарушение</th>
                <th>Время</th>
            </tr>
        </thead>
        <tbody>
            @if ((await UserManager.GetRolesAsync(user)).Contains("user"))
            {
                await context.Entry(user).Reference(u => u.Owner).LoadAsync();
                var owner = user.Owner;
                await UnitOfWork.OwnerRepository.ExplicitLoadingCollection(owner, "Cars");
                ICollection<Car>? cars = owner.Cars;
                violations = violations.Where(v=>cars.Contains(v.Car)).ToList();
            }

                @foreach (var violation in violations)
            {
                var car = violation.Car;
                string carName = $"{car.Manufacturer} {car.Model}";

                <tr>
                    <td>@violation.Id</td>
                    <td>@carName</td>
                    <td>@violation.TypeOfViolation</td>
                    <td>@violation.DateTime</td>
                </tr>
            }
        </tbody>
    </table>
